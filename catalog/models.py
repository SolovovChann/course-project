from decimal                import Decimal
from django.conf            import settings
from django.core.validators import MinValueValidator, MaxValueValidator
from django.db              import models
import math

PRODUCT_TYPE = (
    ('gamepad' , '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã'),
    ('accessory'  , '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'),
    ('keyboard'   , '–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã'),
    ('mouse'      , '–ú—ã—à–∏'),
    ('headset'    , '–ì–∞—Ä–Ω–∏—Ç—É—Ä—ã'),
)


class product(models.Model):
    name     = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=30, null=False, blank=False)
    price    = models.FloatField('–¶–µ–Ω–∞', null=False, blank=False)
    sale     = models.IntegerField('–°–∫–∏–¥–∫–∞ (—É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', null=True, blank=True)
    review   = models.ImageField('–ü—Ä–µ–≤—å—é', upload_to='product', null=False, blank=False)
    on_stock = models.PositiveIntegerField('–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ')
    avalible = models.BooleanField('–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏', default=bool(on_stock) )
    p_type   = models.CharField('–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞', max_length=25, choices=PRODUCT_TYPE, null=True, blank=True)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', max_length=250, null=True, blank=True)

    def getSale(self):
        if 0 < self.sale < 101:
            return round(self.price - (self.price * (self.sale / 100)), 0)
        else:
            return '–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å–∫–∏–¥–∫–∞!'
    def getRating(self):
        result = 0
        if self.comment_set.all():
            for a in self.comment_set.all():
                result += a.rate
            return math.ceil(result / self.comment_set.count()) * 'üåù' + (5 - math.ceil(result / self.comment_set.count())) * 'üåö'
        else:
            return 5 * 'üåö'
    def __str__(self):
        return self.name
    class Meta:
        verbose_name = '–ü—Ä–æ–¥—É–∫—Ç'
        verbose_name_plural = '–ü—Ä–æ–¥—É–∫—Ç—ã'


class reviews(models.Model):
    product     = models.ForeignKey(product, on_delete=models.CASCADE)
    image       = models.ImageField('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to='product', null=False)

    def __str__(self):
        return self.product.name
    class Meta:
        verbose_name = '–ü—Ä–µ–≤—å—é'
        verbose_name_plural = '–ü—Ä–µ–≤—å—é'


class comment(models.Model):
    product     = models.ForeignKey(product, on_delete=models.CASCADE)
    rate        = models.PositiveIntegerField('–û—Ü–µ–Ω–∫–∞', null=False, blank=False, validators=[MaxValueValidator(5)])
    authorName  = models.CharField('–ò–º—è –∞–≤—Ç–æ—Ä–∞', max_length=50)
    text        = models.TextField('–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
    pubDate     = models.DateTimeField('–î–∞—Ç–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ—Ç–Ω–∞—Ä–∏—è', auto_now=True)
    likes       = models.PositiveIntegerField('–õ–∞–π–∫–∏', null=False, blank=False, default=0)
    dsilikes    = models.PositiveIntegerField('–î–∏—Å–ª–∞–π–∫–∏', null=False, blank=False, default=0)

    def getCommentRating(self):
        result = self.likes - self.dsilikes
        return result

    def __str__(self):
        return self.authorName
    def getRate(self):
        return self.rate * 'üåù' + (5 - self.rate) * 'üåö'
        
    class Meta:
        verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        verbose_name_plural = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'


class characteristic(models.Model):
    product     = models.ForeignKey(product, on_delete=models.CASCADE)
    parameter   = models.CharField('–ü–∞—Ä–∞–º–µ—Ç—Ä', max_length=50)
    value       = models.CharField('–ó–Ω–∞—á–µ–Ω–∏–µ', max_length=120)

    class Meta:
        verbose_name = ('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞')
        verbose_name_plural = ('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')

    def __str__(self):
        return self.name


class cart(object):
    def __init__(self, request):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
        """

        self.session = request.session
        cart = self.session.get(settings.CART_SESSION_ID)

        if not cart:
            #   Save an empty cart in a session
            cart = self.session[ settings.CART_SESSION_ID ] = {}
            
        self.cart = cart


    def add(self, product, quantity=1, update_quantity=False):
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ –µ–≥–æ ID
        """
        productId = str(product.id)

        if productId not in self.cart:
            self.cart[productId] = {
                'quantity'    : 0,
                'price'       : product.price
            }
        
        if update_quantity:
            self.cart[productId]['quantity'] = quantity
        else:
            self.cart[productId]['quantity'] += quantity
        self.save()

    
    def save(self):
        #   Cart session update
        self.session[settings.CART_SESSION_ID] = self.cart
        self.session.modified = True


    def remove(self, product):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        """

        if str(product.id) in self.cart:
            del self.cart[ str( product.id )]
            self.save()


    def __iter__(self):
        """
        –ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î
        """

        product_ids = self.cart.keys()
        #   get products
        products = product.objects.filter( id__in=product_ids )
        for Product in products:
            self.cart[str(product.id)]['product'] = product

        for item in self.cart.values():
            item['price'] = Decimal(item['price'])
            item['total'] = item['price'] * item['quantity']
            yield item


    def __len__(self):
        """
        –ü–æ–¥—Å—á—ë—Ç –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        """
        return sum( item['quantity'] for item in self.cart.values())


    
    def get_total_price(self):
        return sum( Decimal( item['price'] * item['quantity'] for item in self.cart.values()))


    def clear(self):
        del self.session[ settings.CART_SESSION_ID]
        self.session.modified = True